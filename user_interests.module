<?php
/* $Id$ */

/**
 * @file
 * Shows a user's most used taxonomy terms on the profile page.
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 */

/**
 * Implementation of hook_user();
 */
function user_interests_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  switch ($op) {
    case 'view':

//       drupal_set_message('<pre>'. print_r($account->user_interests, 1) .'</pre>');
      if (is_array($account->user_interests)) {
        foreach($account->user_interests as $vid => $interests) {
          $terms = array();
          foreach($interests as $interest) {
            $terms[] = l($interest->name, 'taxonomy/term/'. $interest->tid) .' ('. ($interest->posts ? $interest->posts : 0) .' Posts, '. ($interest->comments ? $interest->comments : 0) .' Comments)';
          }

          $vocab = taxonomy_get_vocabulary($vid);
          $items['user_interests_'. $vid] = array(
            'title' => t($vocab->name),
            'value' => theme('user_interests', $terms),
            'class' => 'terms',
          );
        }
      }
      return $items ? array(t('Interests') => $items) : NULL;
      break;
    case 'load':
      $account->user_interests = user_interests_get_terms($account->uid, 5);
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function user_interests_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Taxonomy: Who wrote on this topic'),
    );
    $blocks[1] = array(
      'info' => t('Taxonomy: Who commented on this topic'),
    );
    $blocks[2] = array(
      'info' => t('Node: Taxonomy: Who commented on this topic'),
    );
    $blocks[3] = array(
      'info' => t('Node: Taxonomy: Who commented on this topic'),
    );
    return $blocks;
  }
  else if ($op == 'configure' && $delta == 0) {
  }
  else if ($op == 'save' && $delta == 0) {
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block = array(
          'subject' => t('Who wrote on this topic'),
          'content' => user_interests_block_1(),
        );
        break;
      case 1:
        $block = array(
          'subject' => t('Who commented on this topic'),
          'content' => user_interests_block_2(),
        );
        break;
      case 2:
        $block = array(
          'subject' => t('Who wrote on these topics'),
          'content' => user_interests_block_3(),
        );
        break;
      case 3:
        $block = array(
          'subject' => t('Who commented on these topics'),
          'content' => user_interests_block_4(),
        );
        break;
    }
    return $block;
  }
}

function user_interests_block_1() {
  if (arg(0) == 'taxonomy') {
    if (is_numeric(arg(2))) {
      $uids = user_interests_nodes_get_users(arg(2));
      if (is_array($uids)) {
        foreach($uids as $key => $uid) {
          $users[] = user_load(array('uid' => $uid->uid));
        }
      }
    }
  }

  return $users ? theme('user_list', $users) : NULL;
}

function user_interests_block_2() {
  if (arg(0) == 'taxonomy') {
    if (is_numeric(arg(2))) {
      $uids = user_interests_comments_get_users(arg(2));
      if (is_array($uids)) {
        foreach($uids as $key => $uid) {
          $users[] = user_load(array('uid' => $uid->uid));
        }
      }
    }
  }

  return $users ? theme('user_list', $users) : NULL;
}

function user_interests_block_3() {
  if (arg(0) == 'node') {
    if (is_numeric(arg(2))) {
      $uids = user_interests_comments_get_users(arg(2));
      if (is_array($uids)) {
        foreach($uids as $key => $uid) {
          $users[] = user_load(array('uid' => $uid->uid));
        }
      }
    }
  }

  return $users ? theme('user_list', $users) : NULL;
}

function user_interests_block_4() {
  if (arg(0) == 'node') {
    if (is_numeric(arg(2))) {
      $uids = user_interests_comments_get_users(arg(2));
      if (is_array($uids)) {
        foreach($uids as $key => $uid) {
          $users[] = user_load(array('uid' => $uid->uid));
        }
      }
    }
  }

  return $users ? theme('user_list', $users) : NULL;
}

/**
 * Get users who posted nodes in term tid
 * @return an array with uid
 */
function user_interests_nodes_get_users($tid, $limit = 10) {
  $interests = array();
  //get node taxonomy
  $result = db_query("SELECT u.uid, COUNT(tn.nid) as count FROM {users} u
                        INNER JOIN {node} n ON u.uid=n.uid
                        INNER JOIN {term_node} tn ON n.nid=tn.nid
                        WHERE tn.tid=%d
                          GROUP BY u.uid
                        LIMIT %d", $tid, $limit);

  while($uid = db_fetch_object($result)) {
    $uids[] = $uid;
  }
//   drupal_set_message(dprint_r($users));//DEBUG
  return $uids;
}

/**
 * Get users who posted comments on nodes in term tid
 * @return an array with uid
 */
function user_interests_comments_get_users($tid, $limit = 10) {
  $interests = array();
  //get node taxonomy
  $result = db_query("SELECT u.uid, COUNT(tn.nid) as count FROM {users} u
                        INNER JOIN {comments} c ON u.uid=c.uid
                        INNER JOIN {term_node} tn ON c.nid=tn.nid
                        WHERE tn.tid=%d
                        GROUP BY u.uid
                        LIMIT %d", $tid, $limit);

  while($uid = db_fetch_object($result)) {
    $uids[] = $uid;
  }
//   drupal_set_message(dprint_r($users));//DEBUG
  return $uids;
}

/**
 * Get the taxonomy terms associated with user's nodes and comments
 */
function user_interests_get_terms($uid, $limit = 10) {
  $interests = array();
  //get node taxonomy
  $result = db_query("SELECT td.*, COUNT(td.tid) as posts FROM {term_data} td
                        INNER JOIN {term_node} tn ON td.tid=tn.tid
                        INNER JOIN {node} n ON n.nid=tn.nid
                        WHERE n.uid = %d
                        GROUP BY td.tid
                        ORDER BY posts DESC LIMIT %d", $uid, $limit);
  while ($object = db_fetch_object($result)) {
    $object->comments = 0;
    $interests[$object->vid][$object->tid] = $object;
  }

  //get comment taxonomy
  $result = db_query("SELECT td.*, COUNT(td.tid) as comments FROM {term_data} td
                        INNER JOIN {term_node} tn ON td.tid=tn.tid
                        INNER JOIN {comments} c ON c.nid=tn.nid
                        WHERE c.uid = %d
                        GROUP BY td.tid
                        ORDER BY comments DESC LIMIT %d", $uid, $limit);
  while ($object = db_fetch_object($result)) {
    $object->posts = $interests[$object->vid][$object->tid]->posts;
    $interests[$object->vid][$object->tid] = $object;
  }

  return $interests;
}

/**
 * Themeable function
 */
function theme_user_interests($items = array(), $title = NULL, $type = 'ul', $attributes = NULL) {
  $output = '<div class="user-interests">';
  if (isset($title)) {
    $output .= '<h3>'. $title .'</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    foreach ($items as $item) {
      $attributes = array();
      $children = array();
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        $data .= theme_item_list($children, NULL, $type, $attributes); // Render nested list
      }
      $output .= '<li' . drupal_attributes($attributes) . '>'. $data .'</li>';
    }
    $output .= "</$type>";
  }
  $output .= '</div>';
  return $output;
}
